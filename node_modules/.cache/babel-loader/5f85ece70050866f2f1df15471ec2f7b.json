{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Design2\\\\Desktop\\\\movieDB\\\\src\\\\App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport Search from \"./components/search/search.component\";\nimport Card from \"./components/card/card.component\";\nimport Footer from \"./components/footer/footer.component\";\nimport { CalculateRevenue } from \"./convert.js\";\nimport { imdb, omdbapi } from \"./config\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getMovieData = () => {\n      fetch(`https://api.themoviedb.org/3/movie/${this.state.imdbId}?api_key=${imdb}&language=en-US`).then(response => response.json()).then(data => {\n        data.status_code === 34 ? this.setState({\n          errorMessage: \"Movie not found!\"\n        }) : this.setState({ ...this.state.backdropPath,\n          backdropPath: data.backdrop_path,\n          ...this.state.posterPath,\n          posterPath: data.poster_path,\n          ...this.state.title,\n          title: data.title,\n          ...this.state.tagline,\n          tagline: data.tagline,\n          ...this.state.overview,\n          overview: data.overview,\n          ...this.state.productionCompanies,\n          productionCompanies: data.production_companies.map(company => company.name),\n          ...this.state.genres,\n          genres: data.genres.map(genre => genre.name),\n          ...this.state.releaseDate,\n          releaseDate: data.releaseDate,\n          ...this.state.runtime,\n          runtime: data.runtime,\n          ...this.state.revenue,\n          revenue: CalculateRevenue(data.revenue),\n          ...this.state.voteAverage,\n          voteAverage: data.vote_average\n        });\n      });\n    };\n\n    this.handleSearch = e => {\n      if (this.state.error_message.length > 0) {\n        this.setState({ ...this.state.errorMessage,\n          errorMessage: \"\"\n        });\n      }\n\n      this.setState({ ...this.state.search,\n        search: e.target.value === \" \" ? \"+\" : e.target.value\n      });\n    };\n\n    this.submitSearch = e => {\n      if (e.charCode === 13) {\n        fetch(`https://www.omdbapi.com/?apikey=${omdbapi}&t=${this.state.search}`).then(response => response.json()).then(data => {\n          data.Error === \"Movie not found!\" ? this.setState({ ...this.state.errorMessage,\n            errorMessage: \"Movie not found!\"\n          }) : this.setState({ ...this.state.imdbId,\n            imdbId: data.imdbID\n          }, () => this.getMovieData());\n        });\n      }\n    };\n\n    this.state = {\n      search: \"\",\n      backdropPath: \"\",\n      poster: \"\",\n      title: \"\",\n      releaseDate: \"\",\n      revenue: \"\",\n      overview: \"\",\n      tagline: \"\",\n      productionCompanies: [],\n      genres: [],\n      releaseDate: 0,\n      runtime: 0,\n      revenue: 0,\n      voteAverage: 0,\n      imdbId: \"tt4154796\",\n      errorMessage: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getMovieData();\n  }\n\n  render() {\n    const {\n      backdropPath,\n      errorMessage,\n      posterPath,\n      title,\n      overview,\n      tagline,\n      productionCompanies,\n      genres,\n      releaseDate,\n      runtime,\n      revenue,\n      voteAverage\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      style: {\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${this.state.backdropPath})`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"search-container-main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.error_message.toUpperCase()), React.createElement(Search, {\n      handleSearch: this.handleSearch,\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(Card, {\n      posterPath: posterPath,\n      title: true,\n      overview: true,\n      tagline: true,\n      productionCompanies: true,\n      genres: true,\n      releaseDate: true,\n      runtime: true,\n      revenue: true,\n      voteAverage: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Design2/Desktop/movieDB/src/App.js"],"names":["React","Search","Card","Footer","CalculateRevenue","imdb","omdbapi","App","Component","constructor","getMovieData","fetch","state","imdbId","then","response","json","data","status_code","setState","errorMessage","backdropPath","backdrop_path","posterPath","poster_path","title","tagline","overview","productionCompanies","production_companies","map","company","name","genres","genre","releaseDate","runtime","revenue","voteAverage","vote_average","handleSearch","e","error_message","length","search","target","value","submitSearch","charCode","Error","imdbID","poster","componentDidMount","render","backgroundImage","toUpperCase"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from './logo.svg';\r\nimport Search from \"./components/search/search.component\";\r\nimport Card from \"./components/card/card.component\";\r\nimport Footer from \"./components/footer/footer.component\";\r\nimport {CalculateRevenue} from \"./convert.js\"\r\n\r\nimport {imdb, omdbapi} from \"./config\";\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      search: \"\",\r\n      backdropPath: \"\",\r\n      poster: \"\",\r\n      title: \"\",\r\n      releaseDate: \"\",\r\n      revenue: \"\",\r\n      overview: \"\",\r\n      tagline: \"\",\r\n      productionCompanies: [],\r\n      genres: [],\r\n      releaseDate: 0,\r\n      runtime: 0,\r\n      revenue: 0,\r\n      voteAverage: 0,\r\n      imdbId: \"tt4154796\",\r\n      errorMessage: \"\"\r\n    }\r\n  }\r\n\r\n  getMovieData = () =>{\r\n    fetch(`https://api.themoviedb.org/3/movie/${this.state.imdbId}?api_key=${imdb}&language=en-US`)\r\n    .then(response => response.json())\r\n    .then(data =>{\r\n      data.status_code === 34 ? this.setState({errorMessage: \"Movie not found!\"}) : (\r\n      this.setState({...this.state.backdropPath, backdropPath: data.backdrop_path,\r\n        ...this.state.posterPath, posterPath: data.poster_path, \r\n        ...this.state.title, title: data.title, \r\n        ...this.state.tagline, tagline: data.tagline, \r\n        ...this.state.overview, overview: data.overview, \r\n        ...this.state.productionCompanies, productionCompanies: data.production_companies.map(company=> company.name),\r\n        ...this.state.genres, genres: data.genres.map(genre=> genre.name),\r\n        ...this.state.releaseDate, releaseDate: data.releaseDate,\r\n        ...this.state.runtime, runtime: data.runtime,\r\n        ...this.state.revenue, revenue: CalculateRevenue(data.revenue),\r\n        ...this.state.voteAverage, voteAverage: data.vote_average\r\n        })\r\n    );\r\n    }); \r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getMovieData();\r\n  }\r\n\r\n  handleSearch = (e) =>{\r\n    if(this.state.error_message.length > 0){\r\n      this.setState({...this.state.errorMessage, errorMessage: \"\"});\r\n    }\r\n\r\n    this.setState({...this.state.search, search: e.target.value === \" \" ? \"+\" : e.target.value});\r\n  }\r\n\r\n  submitSearch = (e) =>{\r\n    if(e.charCode ===  13){\r\n      fetch(`https://www.omdbapi.com/?apikey=${omdbapi}&t=${this.state.search}`)\r\n      .then(response=> response.json())\r\n      .then(data => {\r\n        data.Error === \"Movie not found!\" ? this.setState({...this.state.errorMessage, errorMessage: \"Movie not found!\"}) : (\r\n        this.setState({...this.state.imdbId, imdbId: data.imdbID}, ()=> this.getMovieData()));\r\n    })\r\n    }\r\n    \r\n  }\r\n\r\n  render(){\r\n    const {backdropPath, errorMessage, posterPath, title, overview, tagline, productionCompanies, genres, releaseDate, runtime, revenue, voteAverage} = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\" style={{backgroundImage: `url(https://image.tmdb.org/t/p/original/${this.state.backdropPath})`}}>\r\n          <div className=\"overlay\">\r\n          <div className=\"search-container-main\">\r\n            <h1 className=\"error-message\">{this.state.error_message.toUpperCase()}</h1>\r\n            <Search \r\n              handleSearch={this.handleSearch} \r\n              submitSearch={this.submitSearch}/>\r\n          </div>\r\n         \r\n         <Card posterPath={posterPath} \r\n               title\r\n               overview\r\n               tagline \r\n               productionCompanies\r\n               genres\r\n               releaseDate\r\n               runtime\r\n               revenue\r\n               voteAverage\r\n               />\r\n          <Footer/>\r\n         </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}